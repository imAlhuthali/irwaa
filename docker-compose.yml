version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: telebot_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-telebot}
      POSTGRES_USER: ${DB_USER:-telebot_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_secure_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - telebot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-telebot_user} -d ${DB_NAME:-telebot}"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis (for caching and session management)
  redis:
    image: redis:7-alpine
    container_name: telebot_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - telebot_network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Main Telegram Bot Application
  telebot:
    build: .
    container_name: telebot_app
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - DATABASE_URL=postgresql+asyncpg://${DB_USER:-telebot_user}:${DB_PASSWORD:-your_secure_password}@postgres:5432/${DB_NAME:-telebot}
      - REDIS_URL=redis://redis:6379/0
      - WEBHOOK_URL=${WEBHOOK_URL:-https://your-domain.com}
      - WEBHOOK_HOST=0.0.0.0
      - WEBHOOK_PORT=8000
      - USE_WEBHOOK=${USE_WEBHOOK:-true}
      - ADMIN_IDS=${ADMIN_IDS:-123456789}
      - DEBUG=${DEBUG:-false}
    ports:
      - "8000:8000"
    volumes:
      - ./logs:/app/logs
      - ./uploads:/app/uploads
      - ./content:/app/content
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - telebot_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Nginx (optional, for reverse proxy)
  nginx:
    image: nginx:alpine
    container_name: telebot_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - telebot
    networks:
      - telebot_network
    restart: unless-stopped
    profiles:
      - production

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  telebot_network:
    driver: bridge